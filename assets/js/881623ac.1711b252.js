"use strict";(globalThis.webpackChunkdocs=globalThis.webpackChunkdocs||[]).push([[5119],{3023:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var s=r(3696);const i={},t=s.createContext(i);function a(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(t.Provider,{value:n},e.children)}},9001:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"database/db_sql","title":"DB and SQL","description":"The @devbro/neko-sql package provides a powerful SQL query builder for working with relational databases. It supports PostgreSQL with plans for MySQL, SQLite, and MS SQL Server.","source":"@site/docs/database/db_sql.md","sourceDirName":"database","slug":"/database/db_sql","permalink":"/pashmak/docs/database/db_sql","draft":false,"unlisted":false,"editUrl":"https://github.com/devbro1/pashmak/blob/master/docs/docs/database/db_sql.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Database Migrations","permalink":"/pashmak/docs/database/db_migration"},"next":{"title":"ORM and Models","permalink":"/pashmak/docs/database/orm-and-model"}}');var i=r(2540),t=r(3023);const a={sidebar_position:3},l="DB and SQL",o={},c=[{value:"Features",id:"features",level:2},{value:"Quick Reference - Query Builder API",id:"quick-reference---query-builder-api",level:2},{value:"Method Summary Table",id:"method-summary-table",level:3},{value:"Operators Available in <code>whereOp()</code> and <code>havingOp()</code>",id:"operators-available-in-whereop-and-havingop",level:3},{value:"Connection",id:"connection",level:2},{value:"Creating a Connection",id:"creating-a-connection",level:3},{value:"Connection Methods",id:"connection-methods",level:3},{value:"Query Builder",id:"query-builder",level:2},{value:"Basic Queries",id:"basic-queries",level:3},{value:"Select All Records",id:"select-all-records",level:4},{value:"Select Specific Columns",id:"select-specific-columns",level:4},{value:"Get First Record",id:"get-first-record",level:4},{value:"Count Records",id:"count-records",level:4},{value:"Where Clauses",id:"where-clauses",level:3},{value:"Basic Where",id:"basic-where",level:4},{value:"OR Conditions",id:"or-conditions",level:4},{value:"NOT Conditions",id:"not-conditions",level:4},{value:"Where NULL",id:"where-null",level:4},{value:"Where Column Comparison",id:"where-column-comparison",level:4},{value:"Nested Where Clauses",id:"nested-where-clauses",level:4},{value:"Raw Where Clauses",id:"raw-where-clauses",level:4},{value:"Clear Where Clauses",id:"clear-where-clauses",level:4},{value:"Ordering",id:"ordering",level:3},{value:"Limiting and Offsetting",id:"limiting-and-offsetting",level:3},{value:"Grouping",id:"grouping",level:3},{value:"Having Clauses",id:"having-clauses",level:3},{value:"Joins",id:"joins",level:3},{value:"Inner Join",id:"inner-join",level:4},{value:"Left Join",id:"left-join",level:4},{value:"Right Join",id:"right-join",level:4},{value:"Full Join",id:"full-join",level:4},{value:"Cross Join",id:"cross-join",level:4},{value:"Join with Subquery",id:"join-with-subquery",level:4},{value:"Data Manipulation",id:"data-manipulation",level:3},{value:"Insert",id:"insert",level:4},{value:"Insert and Get ID",id:"insert-and-get-id",level:4},{value:"Update",id:"update",level:4},{value:"Upsert (Insert or Update)",id:"upsert-insert-or-update",level:4},{value:"Delete",id:"delete",level:4},{value:"Query Compilation",id:"query-compilation",level:3},{value:"Transactions",id:"transactions",level:2},{value:"Basic Transaction",id:"basic-transaction",level:3},{value:"Transaction with Multiple Operations",id:"transaction-with-multiple-operations",level:3},{value:"Advanced Query Examples",id:"advanced-query-examples",level:2},{value:"Complex Where with Nested Conditions",id:"complex-where-with-nested-conditions",level:3},{value:"Query with Multiple Joins",id:"query-with-multiple-joins",level:3},{value:"Aggregation with Group By",id:"aggregation-with-group-by",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Use Transactions for Related Operations",id:"1-use-transactions-for-related-operations",level:3},{value:"2. Use Prepared Statements",id:"2-use-prepared-statements",level:3},{value:"3. Index Frequently Queried Columns",id:"3-index-frequently-queried-columns",level:3},{value:"4. Use Appropriate Column Types",id:"4-use-appropriate-column-types",level:3},{value:"5. Clean Up Connections",id:"5-clean-up-connections",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Connection Issues",id:"connection-issues",level:3},{value:"Debug SQL Queries",id:"debug-sql-queries",level:3},{value:"Supported Databases",id:"supported-databases",level:2},{value:"Current Support",id:"current-support",level:3},{value:"Planned Support",id:"planned-support",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"db-and-sql",children:"DB and SQL"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"@devbro/neko-sql"})," package provides a powerful SQL query builder for working with relational databases. It supports PostgreSQL with plans for MySQL, SQLite, and MS SQL Server."]}),"\n",(0,i.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Query Builder"}),": Flexible API for building SQL queries"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Transactions"}),": ACID-compliant transaction support"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Joins"}),": All types of SQL joins"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Raw Queries"}),": Execute raw SQL when needed"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"quick-reference---query-builder-api",children:"Quick Reference - Query Builder API"}),"\n",(0,i.jsx)(n.p,{children:"Here's a comprehensive example showing all possible query builder methods and their variations:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { db } from "@devbro/pashmak/facades";\n\nconst connection = new PostgresqlConnection({\n  /* config */\n});\nawait connection.connect();\n\nconst query = connection.getQuery();\n// OR\nconst query = await db().getQuery();\n\n// \ud83d\udd37 TABLE SELECTION\nquery.table("users"); // Set the table to query\n\n// \ud83d\udd37 SELECT COLUMNS\nquery.select(["id", "name", "email"]); // Specific columns\nquery.select(["*"]); // All columns (default)\nquery.select(["users.*", "posts.title"]); // With table prefix\n\n// \ud83d\udd37 WHERE CLAUSES\nquery.whereOp("age", "=", 25); // Equality\nquery.whereOp("age", ">", 18); // Greater than\nquery.whereOp("age", "<", 65); // Less than\nquery.whereOp("age", "!=", 30); // Not equal\nquery.whereOp("name", "like", "John%"); // LIKE pattern\nquery.whereOp("name", "ilike", "john%"); // Case-insensitive LIKE\nquery.whereOp("id", "in", [1, 2, 3]); // IN clause\nquery.whereOp("status", "=", "active", "or"); // OR condition\nquery.whereOp("deleted", "=", true, "and", true); // NOT condition `not deleted = true`\n\n// WHERE NULL\nquery.whereNull("deleted_at"); // IS NULL\nquery.whereNull("deleted_at", "and", true); // not deleted_at is null\n\n// WHERE COLUMN COMPARISON\nquery.whereColumn("first_name", "=", "last_name"); // Compare columns\n\n// NESTED WHERE\nquery.whereNested((q) => {\n  q.whereOp("status", "=", "active").whereOp("status", "=", "pending", "or");\n});\n\n// RAW WHERE\nquery.whereRaw("LOWER(email) = ?", ["john@example.com"]);\nquery.whereRaw("DATE(created_at) = CURRENT_DATE", []);\n\n// CLEAR WHERE\nquery.clearWhere(); // Remove all where clauses\n\n// \ud83d\udd37 JOINS\nquery.innerJoin("posts", [{ column1: "users.id", column2: "posts.user_id" }]);\n\nquery.leftJoin("profiles as p", [\n  { column1: "users.id", column2: "p.user_id" },\n]);\n\nquery.rightJoin("orders", [\n  { column1: "users.id", column2: "orders.customer_id" },\n]);\n\nquery.fullJoin("departments", [\n  { column1: "employees.dept_id", column2: "departments.id" },\n]);\n\nquery.crossJoin("sizes", []);\n\n// JOIN WITH SUBQUERY\nconst subquery = connection\n  .getQuery()\n  .table("posts")\n  .groupBy(["user_id"])\n  .alias("post_counts"); // adding alias for subquery is mandatory to generate valid sql\nquery.innerJoin(subquery, [\n  { column1: "users.id", column2: "post_counts.user_id" },\n]);\n\n// \ud83d\udd37 ORDERING\nquery.orderBy("created_at", "desc"); // Descending\nquery.orderBy("name", "asc"); // Ascending\nquery.orderBy("age").orderBy("name"); // Multiple orders\n\n// \ud83d\udd37 GROUPING\nquery.groupBy(["status"]); // Single column\nquery.groupBy(["country", "city"]); // Multiple columns\n\n// \ud83d\udd37 HAVING CLAUSES\nquery.havingOp("count", ">", 10);\nquery.havingOp("sum", ">=", 1000, "or");\nquery.havingRaw("COUNT(*) > ?", [5]);\n\n// \ud83d\udd37 LIMITING & OFFSETTING\nquery.limit(10); // LIMIT 10\nquery.offset(20); // OFFSET 20\nquery.limit(10).offset(20); // Pagination\n\n// \ud83d\udd37 ALIAS\nquery.alias("u"); // Table alias\n\n// \ud83d\udd37 QUERY COMPILATION\nconst compiled = query.toSql();\n// Returns: { sql: string, bindings: any[], parts: string[] }\n\n// \ud83d\udd37 EXECUTION METHODS\nconst results = await query.get(); // Get all results\nconst first = await query.first(); // Get first result or undefined\nconst count = await query.count(); // Get count\nconst cursor = await query.getCursor(); // Get cursor for streaming\n\n// \ud83d\udd37 DATA MANIPULATION\n\n// INSERT\nawait query.table("users").insert({\n  name: "John",\n  email: "john@example.com",\n  age: 30,\n  created_at: new Date(),\n});\n\n// INSERT AND GET ID\nconst result = await query.table("users").insertGetId(\n  {\n    name: "Jane",\n    email: "jane@example.com",\n  },\n  { primaryKey: ["id"] },\n);\nconsole.log(result[0].id);\n\n// UPDATE\nawait query.table("users").whereOp("id", "=", 1).update({\n  name: "John Smith",\n  updated_at: new Date(),\n});\n\n// UPSERT (INSERT OR UPDATE)\nawait query.table("users").upsert(\n  {\n    email: "john@example.com", // Data to insert/update\n    name: "John Doe",\n    age: 30,\n  },\n  ["email"], // Unique constraint columns\n  ["name", "age"], // Columns to update on conflict\n);\n\n// DELETE\nawait query.table("users").whereOp("status", "=", "deleted").delete();\n\n// \ud83d\udd37 CHAINING EXAMPLE - Complex Query\nconst complexResults = await query\n  .table("orders")\n  .select(["orders.id", "users.name", "SUM(order_items.price) as total"])\n  .innerJoin("users", [{ column1: "orders.user_id", column2: "users.id" }])\n  .innerJoin("order_items", [\n    { column1: "orders.id", column2: "order_items.order_id" },\n  ])\n  .whereOp("orders.status", "=", "completed")\n  .whereNested((q) => {\n    q.whereOp("orders.total", ">", 100).whereOp(\n      "orders.priority",\n      "=",\n      "high",\n      "or",\n    );\n  })\n  .groupBy(["orders.id", "users.name"])\n  .havingOp("total", ">", 50)\n  .orderBy("total", "desc")\n  .limit(20)\n  .offset(0)\n  .get();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"method-summary-table",children:"Method Summary Table"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Category"}),(0,i.jsx)(n.th,{children:"Methods"}),(0,i.jsx)(n.th,{children:"Parameters"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Selection"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"table()"}),", ",(0,i.jsx)(n.code,{children:"select()"}),", ",(0,i.jsx)(n.code,{children:"alias()"})]}),(0,i.jsx)(n.td,{children:"table name, column array, alias string"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Where"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"whereOp()"}),", ",(0,i.jsx)(n.code,{children:"whereNull()"}),", ",(0,i.jsx)(n.code,{children:"whereColumn()"}),", ",(0,i.jsx)(n.code,{children:"whereNested()"}),", ",(0,i.jsx)(n.code,{children:"whereRaw()"}),", ",(0,i.jsx)(n.code,{children:"clearWhere()"})]}),(0,i.jsx)(n.td,{children:"column, operator, value, join condition, negate"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Joins"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"innerJoin()"}),", ",(0,i.jsx)(n.code,{children:"leftJoin()"}),", ",(0,i.jsx)(n.code,{children:"rightJoin()"}),", ",(0,i.jsx)(n.code,{children:"fullJoin()"}),", ",(0,i.jsx)(n.code,{children:"crossJoin()"})]}),(0,i.jsx)(n.td,{children:"table/subquery, conditions array"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Ordering"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"orderBy()"})}),(0,i.jsx)(n.td,{children:"column, direction ('asc'/'desc')"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Grouping"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"groupBy()"}),", ",(0,i.jsx)(n.code,{children:"havingOp()"}),", ",(0,i.jsx)(n.code,{children:"havingRaw()"})]}),(0,i.jsx)(n.td,{children:"columns array, conditions"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Limiting"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"limit()"}),", ",(0,i.jsx)(n.code,{children:"offset()"})]}),(0,i.jsx)(n.td,{children:"number"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Execution"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"get()"}),", ",(0,i.jsx)(n.code,{children:"first()"}),", ",(0,i.jsx)(n.code,{children:"count()"}),", ",(0,i.jsx)(n.code,{children:"getCursor()"})]}),(0,i.jsx)(n.td,{children:"none"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Manipulation"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"insert()"}),", ",(0,i.jsx)(n.code,{children:"insertGetId()"}),", ",(0,i.jsx)(n.code,{children:"update()"}),", ",(0,i.jsx)(n.code,{children:"upsert()"}),", ",(0,i.jsx)(n.code,{children:"delete()"})]}),(0,i.jsx)(n.td,{children:"data object, options"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Utility"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"toSql()"}),", ",(0,i.jsx)(n.code,{children:"getConnection()"})]}),(0,i.jsx)(n.td,{children:"none"})]})]})]}),"\n",(0,i.jsxs)(n.h3,{id:"operators-available-in-whereop-and-havingop",children:["Operators Available in ",(0,i.jsx)(n.code,{children:"whereOp()"})," and ",(0,i.jsx)(n.code,{children:"havingOp()"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"="})," - Equal"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:">"})," - Greater than"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<"})," - Less than"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"!="})," - Not equal"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"like"})," - SQL LIKE (case-sensitive)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ilike"})," - SQL ILIKE (case-insensitive, PostgreSQL)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"in"})," - IN clause (value must be array)"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"connection",children:"Connection"}),"\n",(0,i.jsx)(n.h3,{id:"creating-a-connection",children:"Creating a Connection"}),"\n",(0,i.jsx)(n.p,{children:"Currently each request will open its own connection to database, you can then use db facade to gain access to this connection:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { db } from "@devbro/pashmak/facades";\n\nconst connection = db();\nconst q = connection.getQuery();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"connection-methods",children:"Connection Methods"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Begin transaction\nawait connection.beginTransaction();\n\n// Commit transaction\nawait connection.commit();\n\n// Rollback transaction\nawait connection.rollback();\n\n// Disconnect\nawait connection.disconnect();\n\n// Get query builder\nconst query = connection.getQuery();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"query-builder",children:"Query Builder"}),"\n",(0,i.jsx)(n.h3,{id:"basic-queries",children:"Basic Queries"}),"\n",(0,i.jsx)(n.h4,{id:"select-all-records",children:"Select All Records"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const query = connection.getQuery();\nconst results = await query.table("users").get();\n'})}),"\n",(0,i.jsx)(n.h4,{id:"select-specific-columns",children:"Select Specific Columns"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const results = await query\n  .table("users")\n  .select(["id", "name", "email"])\n  .get();\n'})}),"\n",(0,i.jsx)(n.h4,{id:"get-first-record",children:"Get First Record"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const user = await query.table("users").whereOp("id", "=", 1).first();\n'})}),"\n",(0,i.jsx)(n.h4,{id:"count-records",children:"Count Records"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const count = await query.table("users").whereOp("active", "=", true).count();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"where-clauses",children:"Where Clauses"}),"\n",(0,i.jsx)(n.h4,{id:"basic-where",children:"Basic Where"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// WHERE column = value\nquery.whereOp("name", "=", "John");\n\n// WHERE column > value\nquery.whereOp("age", ">", 18);\n\n// WHERE column LIKE value\nquery.whereOp("email", "like", "%@example.com");\n\n// WHERE column ILIKE value (case-insensitive)\nquery.whereOp("name", "ilike", "john%");\n\n// WHERE column IN (values)\nquery.whereOp("status", "in", ["active", "pending"]);\n'})}),"\n",(0,i.jsx)(n.h4,{id:"or-conditions",children:"OR Conditions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// WHERE name = \'John\' OR name = \'Jane\'\nquery.whereOp("name", "=", "John").whereOp("name", "=", "Jane", "or");\n'})}),"\n",(0,i.jsx)(n.p,{children:"If you have multiple operations, the merge type of first one is always ignored."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// WHERE name = \'John\' OR name = \'Jane\'\nquery\n  .whereOp("name", "=", "John", "XYZ")\n  .whereOp("name", "=", "Jane", "or")\n  .whereOp("name", "=", "Jack", "or"); // where name = \'John\' or name = \'Jane\' or name = \'Jack\'\n'})}),"\n",(0,i.jsx)(n.h4,{id:"not-conditions",children:"NOT Conditions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// WHERE NOT status = \'deleted\'\nquery.whereOp("status", "=", "deleted", "and", true); // and not status = `deleted`\n'})}),"\n",(0,i.jsx)(n.h4,{id:"where-null",children:"Where NULL"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// WHERE email IS NULL\nquery.whereNull("email");\n\n// WHERE email IS NOT NULL\nquery.whereNull("email", "and", true);\n'})}),"\n",(0,i.jsx)(n.h4,{id:"where-column-comparison",children:"Where Column Comparison"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// WHERE first_name = last_name\nquery.whereColumn("first_name", "=", "last_name");\n'})}),"\n",(0,i.jsx)(n.h4,{id:"nested-where-clauses",children:"Nested Where Clauses"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// WHERE (status = \'active\' OR status = \'pending\') AND age > 18\nquery\n  .whereNested((q) => {\n    q.whereOp("status", "=", "active").whereOp("status", "=", "pending", "or");\n  })\n  .whereOp("age", ">", 18);\n'})}),"\n",(0,i.jsx)(n.h4,{id:"raw-where-clauses",children:"Raw Where Clauses"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// Custom SQL in where clause\nquery.whereRaw("LOWER(email) = ?", ["john@example.com"]);\n'})}),"\n",(0,i.jsx)(n.h4,{id:"clear-where-clauses",children:"Clear Where Clauses"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Remove all where conditions\nquery.clearWhere();\n"})}),"\n",(0,i.jsx)(n.h3,{id:"ordering",children:"Ordering"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// ORDER BY name ASC\nquery.orderBy("name", "asc");\n\n// ORDER BY created_at DESC\nquery.orderBy("created_at", "desc");\n\n// Multiple order by\nquery.orderBy("status", "asc").orderBy("created_at", "desc");\n'})}),"\n",(0,i.jsx)(n.h3,{id:"limiting-and-offsetting",children:"Limiting and Offsetting"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// LIMIT 10\nquery.limit(10);\n\n// OFFSET 20\nquery.offset(20);\n\n// Pagination: LIMIT 10 OFFSET 20\nquery.limit(10).offset(20);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"grouping",children:"Grouping"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// GROUP BY status\nquery.groupBy(["status"]);\n\n// GROUP BY country, city\nquery.groupBy(["country", "city"]);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"having-clauses",children:"Having Clauses"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// HAVING count > 5\nquery.groupBy(["status"]).havingOp("count", ">", 5);\n\n// HAVING with raw SQL\nquery.groupBy(["status"]).havingRaw("COUNT(*) > ?", [10]);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"joins",children:"Joins"}),"\n",(0,i.jsx)(n.h4,{id:"inner-join",children:"Inner Join"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// INNER JOIN\nquery\n  .table("users")\n  .innerJoin("posts", [{ column1: "users.id", column2: "posts.user_id" }]);\n'})}),"\n",(0,i.jsx)(n.h4,{id:"left-join",children:"Left Join"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'query\n  .table("users")\n  .leftJoin("posts", [{ column1: "users.id", column2: "posts.user_id" }]);\n'})}),"\n",(0,i.jsx)(n.h4,{id:"right-join",children:"Right Join"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'query\n  .table("orders")\n  .rightJoin("customers", [\n    { column1: "orders.customer_id", column2: "customers.id" },\n  ]);\n'})}),"\n",(0,i.jsx)(n.h4,{id:"full-join",children:"Full Join"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'query\n  .table("employees")\n  .fullJoin("departments", [\n    { column1: "employees.dept_id", column2: "departments.id" },\n  ]);\n'})}),"\n",(0,i.jsx)(n.h4,{id:"cross-join",children:"Cross Join"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'query.table("colors").crossJoin("sizes", []);\n'})}),"\n",(0,i.jsx)(n.h4,{id:"join-with-subquery",children:"Join with Subquery"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const subquery = connection\n  .getQuery()\n  .table("posts")\n  .select(["user_id", "COUNT(*) as post_count"])\n  .groupBy(["user_id"])\n  .alias("post_stats");\n\nquery\n  .table("users")\n  .innerJoin(subquery, [\n    { column1: "users.id", column2: "post_stats.user_id" },\n  ]);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"data-manipulation",children:"Data Manipulation"}),"\n",(0,i.jsx)(n.h4,{id:"insert",children:"Insert"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'await query.table("users").insert({\n  name: "John Doe",\n  email: "john@example.com",\n  age: 30,\n  created_at: new Date(),\n});\n'})}),"\n",(0,i.jsx)(n.h4,{id:"insert-and-get-id",children:"Insert and Get ID"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const result = await query.table("users").insertGetId(\n  {\n    name: "Jane Doe",\n    email: "jane@example.com",\n  },\n  { primaryKey: ["id"] },\n);\n\nconsole.log(result[0].id); // Returns the inserted ID\n'})}),"\n",(0,i.jsx)(n.h4,{id:"update",children:"Update"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// Update all records\nawait query.table("users").update({\n  updated_at: new Date(),\n});\n\n// Update with where clause\nawait query.table("users").whereOp("id", "=", 1).update({\n  name: "John Smith",\n  updated_at: new Date(),\n});\n'})}),"\n",(0,i.jsx)(n.h4,{id:"upsert-insert-or-update",children:"Upsert (Insert or Update)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// Insert new or update existing based on unique columns\nawait query.table("users").upsert(\n  {\n    email: "john@example.com",\n    name: "John Doe",\n    age: 30,\n  },\n  ["email"], // Unique columns to check\n  ["name", "age"], // Columns to update if exists\n);\n'})}),"\n",(0,i.jsx)(n.h4,{id:"delete",children:"Delete"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// Delete with where clause\nawait query.table("users").whereOp("status", "=", "deleted").delete();\n\n// Delete all (be careful!)\nawait query.table("temp_data").delete();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"query-compilation",children:"Query Compilation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// Get compiled SQL without executing\nconst compiled = query.table("users").whereOp("age", ">", 18).toSql();\nconsole.log(compiled.sql); // "select * from users where age > ?"\nconsole.log(compiled.bindings); // [18]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"transactions",children:"Transactions"}),"\n",(0,i.jsx)(n.p,{children:"Transactions ensure data integrity by grouping multiple operations."}),"\n",(0,i.jsx)(n.h3,{id:"basic-transaction",children:"Basic Transaction"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const connection = new PostgresqlConnection(config);\nawait connection.connect();\n\ntry {\n  await connection.beginTransaction();\n\n  const query = connection.getQuery();\n\n  // Insert user\n  const result = await query.table("users").insertGetId({\n    name: "John Doe",\n    email: "john@example.com",\n  });\n\n  const userId = result[0].id;\n\n  // Insert related data\n  await query.table("profiles").insert({\n    user_id: userId,\n    bio: "Software developer",\n  });\n\n  await connection.commit();\n  console.log("Transaction successful");\n} catch (error) {\n  await connection.rollback();\n  console.error("Transaction failed:", error);\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"transaction-with-multiple-operations",children:"Transaction with Multiple Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'await connection.beginTransaction();\n\ntry {\n  // Update account balance\n  await query\n    .table("accounts")\n    .whereOp("id", "=", fromAccountId)\n    .update({ balance: balanceAfterDebit });\n\n  // Update another account\n  await query\n    .table("accounts")\n    .whereOp("id", "=", toAccountId)\n    .update({ balance: balanceAfterCredit });\n\n  // Record transaction\n  await query.table("transactions").insert({\n    from_account: fromAccountId,\n    to_account: toAccountId,\n    amount: transferAmount,\n    created_at: new Date(),\n  });\n\n  await connection.commit();\n} catch (error) {\n  await connection.rollback();\n  throw error;\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-query-examples",children:"Advanced Query Examples"}),"\n",(0,i.jsx)(n.h3,{id:"complex-where-with-nested-conditions",children:"Complex Where with Nested Conditions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// SELECT * FROM orders\n// WHERE (status = \'pending\' OR status = \'processing\')\n// AND total > 100\n// AND created_at > \'2024-01-01\'\nconst results = await query\n  .table("orders")\n  .whereNested((q) => {\n    q.whereOp("status", "=", "pending").whereOp(\n      "status",\n      "=",\n      "processing",\n      "or",\n    );\n  })\n  .whereOp("total", ">", 100)\n  .whereOp("created_at", ">", "2024-01-01")\n  .get();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"query-with-multiple-joins",children:"Query with Multiple Joins"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const results = await query\n  .table("orders")\n  .select(["orders.*", "users.name", "products.title"])\n  .innerJoin("users", [{ column1: "orders.user_id", column2: "users.id" }])\n  .innerJoin("order_items", [\n    { column1: "orders.id", column2: "order_items.order_id" },\n  ])\n  .innerJoin("products", [\n    { column1: "order_items.product_id", column2: "products.id" },\n  ])\n  .whereOp("orders.status", "=", "completed")\n  .orderBy("orders.created_at", "desc")\n  .get();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"aggregation-with-group-by",children:"Aggregation with Group By"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const stats = await query\n  .table("orders")\n  .select(["user_id", "COUNT(*) as order_count", "SUM(total) as total_spent"])\n  .groupBy(["user_id"])\n  .havingOp("order_count", ">", 5)\n  .orderBy("total_spent", "desc")\n  .get();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"1-use-transactions-for-related-operations",children:"1. Use Transactions for Related Operations"}),"\n",(0,i.jsx)(n.p,{children:"Always wrap related database operations in transactions to maintain data consistency."}),"\n",(0,i.jsx)(n.h3,{id:"2-use-prepared-statements",children:"2. Use Prepared Statements"}),"\n",(0,i.jsx)(n.p,{children:"The query builder automatically uses parameterized queries to prevent SQL injection:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// \u2705 Safe - uses parameters\nquery.whereOp("email", "=", userInput);\n\n// \u274c Avoid raw SQL with user input\nquery.whereRaw(`email = \'${userInput}\'`); // Dangerous!, you are open to sql injection\n\n// \u2705 If you must use raw SQL, use bindings\nquery.whereRaw("email = ?", [userInput]);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-index-frequently-queried-columns",children:"3. Index Frequently Queried Columns"}),"\n",(0,i.jsx)(n.p,{children:"Add indexes to columns used in WHERE, JOIN, and ORDER BY clauses:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'table.index("email");\ntable.index("created_at");\ntable.index(["user_id", "status"]); // Composite index\n'})}),"\n",(0,i.jsx)(n.h3,{id:"4-use-appropriate-column-types",children:"4. Use Appropriate Column Types"}),"\n",(0,i.jsx)(n.p,{children:"Choose the right column type for your data to optimize storage and performance:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'table.boolean("active"); // Not integer for boolean values\ntable.date("birth_date"); // Not string for dates\ntable.jsonb("metadata"); // For structured data in PostgreSQL\n'})}),"\n",(0,i.jsx)(n.h3,{id:"5-clean-up-connections",children:"5. Clean Up Connections"}),"\n",(0,i.jsx)(n.p,{children:"Always disconnect when done:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'try {\n  const results = await query.table("users").get();\n  // Process results\n} finally {\n  await connection.disconnect();\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"connection-issues",children:"Connection Issues"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// Verify connection configuration\nconst connection = new PostgresqlConnection({\n  host: process.env.DB_HOST || "localhost",\n  database: process.env.DB_NAME,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  port: parseInt(process.env.DB_PORT || "5432"),\n});\n\n// Test connection\ntry {\n  await connection.connect();\n  console.log("Connected successfully");\n} catch (error) {\n  console.error("Connection failed:", error);\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"debug-sql-queries",children:"Debug SQL Queries"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// View compiled SQL before executing\nconst compiled = query.table("users").whereOp("active", "=", true).toSql();\nconsole.log("SQL:", compiled.sql);\nconsole.log("Bindings:", compiled.bindings);\n'})}),"\n",(0,i.jsx)(n.h2,{id:"supported-databases",children:"Supported Databases"}),"\n",(0,i.jsx)(n.h3,{id:"current-support",children:"Current Support"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PostgreSQL"}),": Full support"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"planned-support",children:"Planned Support"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"MySQL"}),"\n",(0,i.jsx)(n.li,{children:"SQLite"}),"\n",(0,i.jsx)(n.li,{children:"Microsoft SQL Server"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);