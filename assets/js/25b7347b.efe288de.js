"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6667],{3023:(e,r,o)=>{o.d(r,{R:()=>a,x:()=>l});var s=o(3696);const t={},n=s.createContext(t);function a(e){const r=s.useContext(n);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(n.Provider,{value:r},e.children)}},8544:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"tutorial-extras/logger","title":"Loggers","description":"you can use log to record details you need during various parts of execution:","source":"@site/docs/tutorial-extras/logger.md","sourceDirName":"tutorial-extras","slug":"/tutorial-extras/logger","permalink":"/pashmak/docs/tutorial-extras/logger","draft":false,"unlisted":false,"editUrl":"https://github.com/devbro1/pashmak/blob/master/docs/docs/tutorial-extras/logger.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Middleware","permalink":"/pashmak/docs/tutorial-extras/middlewares"},"next":{"title":"Database/ORM","permalink":"/pashmak/docs/category/databaseorm"}}');var t=o(2540),n=o(3023);const a={sidebar_position:4},l="Loggers",i={},d=[{value:"detailed logs",id:"detailed-logs",level:2},{value:"multiple loggers",id:"multiple-loggers",level:2},{value:"extrasFunction",id:"extrasfunction",level:2}];function g(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"loggers",children:"Loggers"})}),"\n",(0,t.jsx)(r.p,{children:"you can use log to record details you need during various parts of execution:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'import { logger } from "@root/facades";\n\nlogger().info("info green message");\nlogger().warn("warning yellow message");\nlogger().error("error red message");\nlogger().fatal("fatal black message");\nlogger().trace("trace white message");\nlogger().debug("debug gray message");\n'})}),"\n",(0,t.jsx)(r.p,{children:"these would produce proper log messages in json format to stdout."}),"\n",(0,t.jsx)(r.h2,{id:"detailed-logs",children:"detailed logs"}),"\n",(0,t.jsx)(r.p,{children:"if you need to capture more details in your logs, you can always pass an object instead:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'logger().info({ msg: "my message", err: error });\n// or\nlogger().info("my message", { err: error });\n'})}),"\n",(0,t.jsx)(r.h2,{id:"multiple-loggers",children:"multiple loggers"}),"\n",(0,t.jsx)(r.p,{children:"if you want to have multiple loggers simply define different configs for each logger in config/logger.ts file."}),"\n",(0,t.jsx)(r.p,{children:"Currently we are using Pino to generate logs. So passing any valid Pino config will work."}),"\n",(0,t.jsx)(r.h2,{id:"extrasfunction",children:"extrasFunction"}),"\n",(0,t.jsx)(r.p,{children:"Sometimes you want to globally add some details to all your LogMessages. to do this pass option\nextraFunctions in your config:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'import { ctxSafe } from "@devbro/pashmak/helper";\nimport { LogMessage } from "@devbro/pashmak/logger";\n\nexport default {\n  extrasFunction: (message: LogMessage) => {\n    let requestId = ctxSafe()?.get("requestId");\n    requestId && (message.requestId = requestId);\n    return message;\n  },\n};\n'})})]})}function c(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}}}]);