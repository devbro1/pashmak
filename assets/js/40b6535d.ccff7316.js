"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8576],{3023:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>o});var i=r(3696);const s={},a=i.createContext(s);function t(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(a.Provider,{value:n},e.children)}},3207:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>t,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"going-deeper/email","title":"Email","description":"Pashmak provides a simple way to send emails using different drivers.","source":"@site/docs/going-deeper/email.md","sourceDirName":"going-deeper","slug":"/going-deeper/email","permalink":"/pashmak/docs/going-deeper/email","draft":false,"unlisted":false,"editUrl":"https://github.com/devbro1/pashmak/blob/master/docs/docs/going-deeper/email.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Context","permalink":"/pashmak/docs/going-deeper/context"},"next":{"title":"File Storage","permalink":"/pashmak/docs/going-deeper/file-storage"}}');var s=r(2540),a=r(3023);const t={sidebar_position:2},o="Email",l={},d=[{value:"Config setup",id:"config-setup",level:2},{value:"Mailable",id:"mailable",level:2},{value:"Creating a custom provider",id:"creating-a-custom-provider",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"email",children:"Email"})}),"\n",(0,s.jsx)(n.p,{children:"Pashmak provides a simple way to send emails using different drivers."}),"\n",(0,s.jsx)(n.h2,{id:"config-setup",children:"Config setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'// app/config/email.ts\nexport default {\n  mailer: {\n    default: {\n      provider: "SES",\n      default_from: "no-reply@devbro.com",\n    },\n  },\n  $prod: {\n    mailer: {\n      default: {\n        provider: "SES",\n        // credentials are loaded as env vars\n      },\n    },\n  },\n  $test: {\n    mailer: {\n      default: {\n        provider: "MEMORY",\n        // credentials are loaded as env vars\n      },\n    },\n  },\n};\n'})}),"\n",(0,s.jsx)(n.h2,{id:"mailable",children:"Mailable"}),"\n",(0,s.jsx)(n.p,{children:"You can create a mailable class to handle your email logic."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { Mailable } from "@devbro/pashmak/mailer";\nimport { config } from "@devbro/pashmak/config";\n\nexport class PasswordResetMail implements Mailable {\n  from: string = config.get("mailer.default.default_from");\n  to: string | string[];\n  cc?: string | string[];\n  bcc?: string | string[];\n  subject: string = "Password Reset Request";\n\n  constructor(\n    private userEmail: string,\n    private userName: string,\n    private resetUrl: string,\n  ) {\n    this.to = userEmail;\n  }\n\n  async getTextContent(): Promise<string> {\n    return `\nHello ${this.userName},\n\nYou have requested to reset your password. Please click the link below to reset your password:\n\n${this.resetUrl}\n\nThis link will expire in 1 hour.\n\nIf you did not request this password reset, please ignore this email.\n\nBest regards,\nPashmak Team`.trim();\n  }\n\n  async getHtmlContent(): Promise<string> {\n    return `Hello ${this.userName},<br/>\n<br/>\n<div>You have requested to reset your password. Please click the link below to reset your password:</div>\n<div><a href="${this.resetUrl}">${this.resetUrl}</a></div>\n<div>This link will expire in 1 hour.</div>\n<div>If you did not request this password reset, please ignore this email.</div>\nBest regards,<br/>\nPashmak Team`.trim();\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Once you have your mailable object you can send it using the mailer facade."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { mailer } from "@devbro/pashmak/facades";\n\nconst mail = new PasswordResetMail(\n  user.email,\n  `${user.first_name} ${user.last_name}`.trim() || "User",\n  resetUrl,\n);\nawait mailer().send(mail);\n'})}),"\n",(0,s.jsx)(n.h2,{id:"creating-a-custom-provider",children:"Creating a custom provider"}),"\n",(0,s.jsxs)(n.p,{children:["Let's say you want to create a custom provider for your email service. You can do so by creating a class that implements the MailProvider interface.\nthen register the provider with ",(0,s.jsx)(n.code,{children:"MailerFactory"})," then reference it in your config:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { Mailable } from "../Mailable.mjs";\nimport { MailerProvider } from "../MailerProvider.mjs";\n\nexport class MeowProvider implements MailerProvider {\n  setDefaultFrom(from: string) {\n    ???\n  }\n\n  async sendMail(mail: Mailable) {\n    ???\n  }\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'// initialize.ts\n\nimport { MailerFactory } from "@devbro/pashmak/factories";\n\nMailerFactory.register("MeowMailer", (config) => {\n  return new MeowProvider(config);\n});\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// app/config/email.ts\nexport default {\n  mailer: {\n    default: {\n      provider: 'MeowMailer',\n      config: { ??? }, /* optional config object that will be passed to your provider */\n    },\n  },\n};\n"})})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);