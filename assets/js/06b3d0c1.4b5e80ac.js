"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[444],{1380:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"database/db_migration","title":"Database Migrations","description":"Database migrations provide version control for your database schema, allowing you to track and manage changes to your database structure over time. They enable teams to synchronize database changes and provide a way to roll back changes when needed.","source":"@site/docs/database/db_migration.md","sourceDirName":"database","slug":"/database/db_migration","permalink":"/pashmak/docs/database/db_migration","draft":false,"unlisted":false,"editUrl":"https://github.com/devbro1/pashmak/blob/master/docs/docs/database/db_migration.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Setup Database","permalink":"/pashmak/docs/database/db_setup"},"next":{"title":"DB and SQL","permalink":"/pashmak/docs/database/db_sql"}}');var i=n(2540),s=n(3023);const l={sidebar_position:2},r="Database Migrations",o={},d=[{value:"What are Migrations?",id:"what-are-migrations",level:2},{value:"Creating Migrations",id:"creating-migrations",level:2},{value:"Basic Migration Structure",id:"basic-migration-structure",level:3},{value:"Migration with Foreign Keys",id:"migration-with-foreign-keys",level:3},{value:"Alter Table Migration",id:"alter-table-migration",level:3},{value:"Schema Builder",id:"schema-builder",level:2},{value:"Getting the Schema Builder",id:"getting-the-schema-builder",level:3},{value:"Creating Tables",id:"creating-tables",level:2},{value:"Basic Table",id:"basic-table",level:3},{value:"Column Types",id:"column-types",level:3},{value:"Column Modifiers",id:"column-modifiers",level:3},{value:"Primary Keys",id:"primary-keys",level:3},{value:"Foreign Keys",id:"foreign-keys",level:3},{value:"Indexes",id:"indexes",level:3},{value:"Modifying Tables",id:"modifying-tables",level:2},{value:"Add Columns",id:"add-columns",level:3},{value:"Drop Columns",id:"drop-columns",level:3},{value:"Add Indexes to Existing Table",id:"add-indexes-to-existing-table",level:3},{value:"Add Column with Index",id:"add-column-with-index",level:3},{value:"Dropping Tables",id:"dropping-tables",level:2},{value:"Table Information",id:"table-information",level:2},{value:"Migration Best Practices",id:"migration-best-practices",level:2},{value:"1. Always Write Down Methods",id:"1-always-write-down-methods",level:3},{value:"2. Use Descriptive Migration Names",id:"2-use-descriptive-migration-names",level:3},{value:"3. Handle Foreign Key Dependencies",id:"3-handle-foreign-key-dependencies",level:3},{value:"4. Use Transactions for Multiple Operations",id:"4-use-transactions-for-multiple-operations",level:3},{value:"5. Test Your Migrations",id:"5-test-your-migrations",level:3}];function c(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.header,{children:(0,i.jsx)(a.h1,{id:"database-migrations",children:"Database Migrations"})}),"\n",(0,i.jsx)(a.p,{children:"Database migrations provide version control for your database schema, allowing you to track and manage changes to your database structure over time. They enable teams to synchronize database changes and provide a way to roll back changes when needed."}),"\n",(0,i.jsx)(a.h2,{id:"what-are-migrations",children:"What are Migrations?"}),"\n",(0,i.jsx)(a.p,{children:"Migrations are classes that define changes to be made to your database schema. Each migration has:"}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:["An ",(0,i.jsx)(a.code,{children:"up()"})," method that applies the changes"]}),"\n",(0,i.jsxs)(a.li,{children:["A ",(0,i.jsx)(a.code,{children:"down()"})," method that reverts the changes"]}),"\n"]}),"\n",(0,i.jsx)(a.h2,{id:"creating-migrations",children:"Creating Migrations"}),"\n",(0,i.jsx)(a.h3,{id:"basic-migration-structure",children:"Basic Migration Structure"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:'import { Migration, Schema } from "@devbro/neko-sql";\n\nexport class CreateUsersTable extends Migration {\n  async up(schema: Schema): Promise<void> {\n    await schema.createTable("users", (table) => {\n      table.id();\n      table.timestamps();\n      table.string("name");\n      table.string("email").unique();\n      table.boolean("active").default(true);\n    });\n  }\n\n  async down(schema: Schema): Promise<void> {\n    await schema.dropTable("users");\n  }\n}\n'})}),"\n",(0,i.jsx)(a.h3,{id:"migration-with-foreign-keys",children:"Migration with Foreign Keys"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:'export class CreatePostsTable extends Migration {\n  async up(schema: Schema): Promise<void> {\n    await schema.createTable("posts", (table) => {\n      table.id();\n      table.timestamps();\n      table.string("title");\n      table.text("content");\n      table.integer("user_id");\n      table.boolean("published").default(false);\n\n      table.foreign("user_id").references("id").on("users").onDelete("cascade");\n\n      table.index("user_id");\n      table.index("published");\n    });\n  }\n\n  async down(schema: Schema): Promise<void> {\n    await schema.dropTable("posts");\n  }\n}\n'})}),"\n",(0,i.jsx)(a.h3,{id:"alter-table-migration",children:"Alter Table Migration"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:'export class AddPhoneToUsers extends Migration {\n  async up(schema: Schema): Promise<void> {\n    await schema.alterTable("users", (table) => {\n      table.string("phone_number", 20).nullable();\n      table.index("phone_number");\n    });\n  }\n\n  async down(schema: Schema): Promise<void> {\n    await schema.alterTable("users", (table) => {\n      table.dropColumn("phone_number");\n    });\n  }\n}\n'})}),"\n",(0,i.jsx)(a.h2,{id:"schema-builder",children:"Schema Builder"}),"\n",(0,i.jsx)(a.p,{children:"The Schema Builder is used within migrations to create and modify database tables."}),"\n",(0,i.jsx)(a.h3,{id:"getting-the-schema-builder",children:"Getting the Schema Builder"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:"// Within a migration\nconst schema = connection.getSchema();\n"})}),"\n",(0,i.jsx)(a.h2,{id:"creating-tables",children:"Creating Tables"}),"\n",(0,i.jsx)(a.h3,{id:"basic-table",children:"Basic Table"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:'await schema.createTable("users", (table) => {\n  table.id(); // Auto-increment primary key\n  table.timestamps(); // created_at and updated_at\n  table.string("name");\n  table.string("email").unique();\n  table.boolean("active").default(true);\n});\n'})}),"\n",(0,i.jsx)(a.h3,{id:"column-types",children:"Column Types"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:'await schema.createTable("products", (table) => {\n  // Auto-increment ID\n  table.id();\n\n  // String types\n  table.string("name", 255); // VARCHAR(255)\n  table.text("description"); // TEXT\n  table.char("code"); // CHAR\n\n  // Numeric types\n  table.integer("quantity"); // INTEGER\n  table.float("price"); // FLOAT\n  table.double("weight"); // DOUBLE PRECISION\n\n  // Boolean\n  table.boolean("in_stock"); // BOOLEAN\n\n  // Date/Time\n  table.date("manufactured_date"); // DATE\n  table.timestamp("sold_at"); // TIMESTAMP\n  table.timestampTz("delivered_at"); // TIMESTAMP WITH TIME ZONE\n  table.datetime("checked_at"); // Alias for timestamp\n  table.datetimeTz("verified_at"); // Alias for timestampTz\n\n  // JSON\n  table.json("metadata"); // JSON\n  table.jsonb("settings"); // JSONB (PostgreSQL)\n\n  // Timestamps\n  table.timestamps(); // created_at, updated_at\n});\n'})}),"\n",(0,i.jsx)(a.h3,{id:"column-modifiers",children:"Column Modifiers"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:'await schema.createTable("posts", (table) => {\n  table.id();\n\n  // Nullable column\n  table.string("subtitle").nullable();\n\n  // NOT NULL (default)\n  table.string("title"); // NOT NULL by default\n\n  // Default value\n  table.integer("views").default(0);\n  table.boolean("published").default(false);\n  table.string("status").default("draft");\n\n  // Unique constraint\n  table.string("slug").unique();\n\n  // Multiple modifiers\n  table.string("email").length(200).unique().nullable(false);\n});\n'})}),"\n",(0,i.jsx)(a.h3,{id:"primary-keys",children:"Primary Keys"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:'await schema.createTable("composite_keys", (table) => {\n  table.integer("user_id");\n  table.integer("role_id");\n\n  // Composite primary key\n  table.primary(["user_id", "role_id"]);\n});\n'})}),"\n",(0,i.jsx)(a.h3,{id:"foreign-keys",children:"Foreign Keys"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:'await schema.createTable("posts", (table) => {\n  table.id();\n  table.integer("user_id");\n  table.integer("category_id");\n\n  // Foreign key with cascade\n  table\n    .foreign("user_id")\n    .references("id")\n    .on("users")\n    .onDelete("cascade")\n    .onUpdate("cascade");\n\n  // Foreign key with restrict\n  table\n    .foreign("category_id")\n    .references("id")\n    .on("categories")\n    .onDelete("restrict")\n    .onUpdate("restrict");\n});\n\n// onDelete/onUpdate options:\n// - \'cascade\': Delete/update child records\n// - \'set null\': Set child column to NULL\n// - \'restrict\': Prevent deletion/update\n// - \'no action\': Similar to restrict\n'})}),"\n",(0,i.jsx)(a.h3,{id:"indexes",children:"Indexes"}),"\n",(0,i.jsx)(a.p,{children:"You can add indexes to your tables for better query performance:"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:'await schema.createTable("articles", (table) => {\n  table.id();\n  table.string("title");\n  table.string("slug");\n  table.text("content");\n  table.string("author");\n  table.string("category");\n\n  // Basic index\n  table.index("title");\n\n  // Named index\n  table.index("slug", "idx_article_slug");\n\n  // Unique index\n  table.unique("slug");\n\n  // Composite index\n  table.index(["author", "category"]);\n\n  // Index with custom type\n  table.index("content").type("gin"); // For PostgreSQL full-text search\n\n  // Multiple indexes\n  table.index("author");\n  table.index("category");\n  table.unique(["author", "slug"]);\n});\n\n// Index types (PostgreSQL):\n// - \'btree\': Default, good for equality and range queries\n// - \'hash\': For equality comparisons\n// - \'gin\': For full-text search, JSONB\n// - \'gist\': For geometric data\n// - \'spgist\': Space-partitioned GiST\n// - \'brin\': Block Range INdexes\n'})}),"\n",(0,i.jsx)(a.h2,{id:"modifying-tables",children:"Modifying Tables"}),"\n",(0,i.jsx)(a.h3,{id:"add-columns",children:"Add Columns"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:'await schema.alterTable("users", (table) => {\n  table.string("phone_number").nullable();\n  table.date("birth_date");\n  table.text("bio");\n});\n'})}),"\n",(0,i.jsx)(a.h3,{id:"drop-columns",children:"Drop Columns"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:'await schema.alterTable("users", (table) => {\n  table.dropColumn("temporary_field");\n  table.dropColumn("old_column");\n});\n'})}),"\n",(0,i.jsx)(a.h3,{id:"add-indexes-to-existing-table",children:"Add Indexes to Existing Table"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:'await schema.alterTable("users", (table) => {\n  table.index("email");\n  table.index(["first_name", "last_name"], "idx_full_name");\n});\n'})}),"\n",(0,i.jsx)(a.h3,{id:"add-column-with-index",children:"Add Column with Index"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:'await schema.alterTable("posts", (table) => {\n  table.string("slug").unique();\n  table.index("slug"); // Separate index on the same column\n});\n'})}),"\n",(0,i.jsx)(a.h2,{id:"dropping-tables",children:"Dropping Tables"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:'// Drop table\nawait schema.dropTable("old_table");\n\n// Drop table if exists\nawait schema.dropTableIfExists("temp_table");\n'})}),"\n",(0,i.jsx)(a.h2,{id:"table-information",children:"Table Information"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:'// Get all tables\nconst tables = await schema.tables();\nconsole.log(tables);\n\n// Check if table exists\nconst exists = await schema.tableExists("users");\nconsole.log(exists); // true or false\n'})}),"\n",(0,i.jsx)(a.h2,{id:"migration-best-practices",children:"Migration Best Practices"}),"\n",(0,i.jsx)(a.h3,{id:"1-always-write-down-methods",children:"1. Always Write Down Methods"}),"\n",(0,i.jsx)(a.p,{children:"Every migration should have a corresponding down method that can undo the changes:"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:'export class AddEmailVerificationToUsers extends Migration {\n  async up(schema: Schema): Promise<void> {\n    await schema.alterTable("users", (table) => {\n      table.boolean("email_verified").default(false);\n      table.timestamp("email_verified_at").nullable();\n    });\n  }\n\n  async down(schema: Schema): Promise<void> {\n    await schema.alterTable("users", (table) => {\n      table.dropColumn("email_verified");\n      table.dropColumn("email_verified_at");\n    });\n  }\n}\n'})}),"\n",(0,i.jsx)(a.h3,{id:"2-use-descriptive-migration-names",children:"2. Use Descriptive Migration Names"}),"\n",(0,i.jsx)(a.p,{children:"Migration class names should clearly describe what they do:"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:"// \u2705 Good names\nexport class CreateUsersTable extends Migration {}\nexport class AddEmailIndexToUsers extends Migration {}\nexport class RemoveDeprecatedColumns extends Migration {}\n\n// \u274c Avoid vague names\nexport class Migration1 extends Migration {}\nexport class UpdateTable extends Migration {}\n"})}),"\n",(0,i.jsx)(a.h3,{id:"3-handle-foreign-key-dependencies",children:"3. Handle Foreign Key Dependencies"}),"\n",(0,i.jsx)(a.p,{children:"When creating tables with foreign keys, ensure the referenced tables exist:"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:'// Create users table first\nexport class CreateUsersTable extends Migration {\n  async up(schema: Schema): Promise<void> {\n    await schema.createTable("users", (table) => {\n      table.id();\n      table.string("email").unique();\n      table.timestamps();\n    });\n  }\n}\n\n// Then create posts table that references users\nexport class CreatePostsTable extends Migration {\n  async up(schema: Schema): Promise<void> {\n    await schema.createTable("posts", (table) => {\n      table.id();\n      table.string("title");\n      table.integer("user_id");\n      table.timestamps();\n\n      table.foreign("user_id").references("id").on("users").onDelete("cascade");\n    });\n  }\n}\n'})}),"\n",(0,i.jsx)(a.h3,{id:"4-use-transactions-for-multiple-operations",children:"4. Use Transactions for Multiple Operations"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:'export class ComplexDataMigration extends Migration {\n  async up(schema: Schema): Promise<void> {\n    // Multiple related schema changes should be wrapped in a transaction\n    await schema.createTable("categories", (table) => {\n      table.id();\n      table.string("name");\n    });\n\n    await schema.alterTable("posts", (table) => {\n      table.integer("category_id").nullable();\n      table.foreign("category_id").references("id").on("categories");\n    });\n  }\n\n  async down(schema: Schema): Promise<void> {\n    await schema.alterTable("posts", (table) => {\n      table.dropColumn("category_id");\n    });\n\n    await schema.dropTable("categories");\n  }\n}\n'})}),"\n",(0,i.jsx)(a.h3,{id:"5-test-your-migrations",children:"5. Test Your Migrations"}),"\n",(0,i.jsx)(a.p,{children:"Always test both up and down methods:"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-typescript",children:'// Test migration up\nawait migration.up(schema);\n\n// Verify changes were applied\nconst tableExists = await schema.tableExists("new_table");\nconsole.log("Table created:", tableExists);\n\n// Test migration down\nawait migration.down(schema);\n\n// Verify changes were reverted\nconst tableExistsAfterDown = await schema.tableExists("new_table");\nconsole.log("Table removed:", !tableExistsAfterDown);\n'})})]})}function h(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},3023:(e,a,n)=>{n.d(a,{R:()=>l,x:()=>r});var t=n(3696);const i={},s=t.createContext(i);function l(e){const a=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(s.Provider,{value:a},e.children)}}}]);