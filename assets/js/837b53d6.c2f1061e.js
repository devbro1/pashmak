"use strict";(globalThis.webpackChunkdocs=globalThis.webpackChunkdocs||[]).push([[445],{3023:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var o=n(3696);const i={},s=o.createContext(i);function r(e){const t=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:t},e.children)}},5766:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>x,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"going-deeper/context","title":"Context","description":"One major feature in Pashmak is context. It allows for separating processes safely without sharing sensitive data between them. It also leaves flexibility to share resources among different processes.","source":"@site/docs/going-deeper/context.md","sourceDirName":"going-deeper","slug":"/going-deeper/context","permalink":"/pashmak/docs/going-deeper/context","draft":false,"unlisted":false,"editUrl":"https://github.com/devbro1/pashmak/blob/master/docs/docs/going-deeper/context.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Going Deaper","permalink":"/pashmak/docs/category/going-deaper"},"next":{"title":"Email","permalink":"/pashmak/docs/going-deeper/email"}}');var i=n(2540),s=n(3023);const r={sidebar_position:1},c="Context",a={},d=[{value:"creating your own context",id:"creating-your-own-context",level:2},{value:"Unit testing in a contexualized env",id:"unit-testing-in-a-contexualized-env",level:2},{value:"detect context availability",id:"detect-context-availability",level:3}];function l(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"context",children:"Context"})}),"\n",(0,i.jsx)(t.p,{children:"One major feature in Pashmak is context. It allows for separating processes safely without sharing sensitive data between them. It also leaves flexibility to share resources among different processes."}),"\n",(0,i.jsx)(t.p,{children:"contextualized processes:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"http requests"}),"\n",(0,i.jsx)(t.li,{children:"cli command"}),"\n",(0,i.jsx)(t.li,{children:"cron jobs"}),"\n",(0,i.jsx)(t.li,{children:"queue jobs"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"creating-your-own-context",children:"creating your own context"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'import { ctx } from "@devbro/pashmak/context";\n\nctx().set("context_key", my_object);\n\nctx().get < MyObject > get("context_key");\n'})}),"\n",(0,i.jsx)(t.p,{children:"It is suggested that you add a wrapper around your context."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'function getMyObject(): MyObject {\n  return ctx().getOrThrow < MyObject > get("context_key");\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"unit-testing-in-a-contexualized-env",children:"Unit testing in a contexualized env"}),"\n",(0,i.jsx)(t.p,{children:"during testing you may want to have your own contextualized test or mini process."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'import { context_provider } from "@devbro/pashmak/context";\n\ntest("context test", async () => {\n  await context_provider.run(async (): Promise<void> => {\n    ctx().get("????");\n  });\n});\n'})}),"\n",(0,i.jsxs)(t.p,{children:["If you ever get an error that ",(0,i.jsx)(t.code,{children:"Context has not started"})," it means you are trying to access context outside of a context provider run block. Just wrap your code in ",(0,i.jsx)(t.code,{children:"context_provider.run(async () => { /* YOUR CODE */ });"})]}),"\n",(0,i.jsx)(t.h3,{id:"detect-context-availability",children:"detect context availability"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"// to detect if the code is running inside a context or not\nif (ctx.isActive()) {\n  ctx().get(KEY);\n}\n"})})]})}function x(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);