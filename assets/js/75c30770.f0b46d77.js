"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6763],{3023:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var o=n(3696);const s={},r=o.createContext(s);function i(e){const t=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:t},e.children)}},8750:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"tutorial-extras/context","title":"Context","description":"One major feature is context, it allows for separating processes safely without sharing sensetive data between them.","source":"@site/docs/tutorial-extras/context.md","sourceDirName":"tutorial-extras","slug":"/tutorial-extras/context","permalink":"/pashmak/docs/tutorial-extras/context","draft":false,"unlisted":false,"editUrl":"https://github.com/devbro1/pashmak/blob/master/docs/docs/tutorial-extras/context.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"File Storage","permalink":"/pashmak/docs/tutorial-extras/file-storage"},"next":{"title":"Middleware","permalink":"/pashmak/docs/tutorial-extras/middlewares"}}');var s=n(2540),r=n(3023);const i={sidebar_position:3},a="Context",c={},l=[{value:"creating your own context",id:"creating-your-own-context",level:2},{value:"Unit testing in a contexualized env",id:"unit-testing-in-a-contexualized-env",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"context",children:"Context"})}),"\n",(0,s.jsx)(t.p,{children:"One major feature is context, it allows for separating processes safely without sharing sensetive data between them."}),"\n",(0,s.jsx)(t.p,{children:"contextualized processes:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"http requests"}),"\n",(0,s.jsx)(t.li,{children:"cli command"}),"\n",(0,s.jsx)(t.li,{children:"cron jobs"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"creating-your-own-context",children:"creating your own context"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'ctx().set("context_key", my_object);\n\nctx().get < MyObject > get("context_key");\n'})}),"\n",(0,s.jsx)(t.p,{children:"It is suggested that you add a wrapper around your context."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'function getMyObject(): MyObject {\n  return ctx().getOrThrow < MyObject > get("context_key");\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"unit-testing-in-a-contexualized-env",children:"Unit testing in a contexualized env"}),"\n",(0,s.jsx)(t.p,{children:"during testing you may want to have your own contextualized test or mini process."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'import { context_provider } from "@devbro/pashmak/context";\n\ntest("context test", async () => {\n  await context_provider.run(async (): Promise<void> => {\n    ctx().get("????");\n  });\n});\n'})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);