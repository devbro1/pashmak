"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5154],{3023:(e,o,r)=>{r.d(o,{R:()=>a,x:()=>i});var n=r(3696);const s={},t=n.createContext(s);function a(e){const o=n.useContext(t);return n.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(t.Provider,{value:o},e.children)}},5219:(e,o,r)=>{r.r(o),r.d(o,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>n,toc:()=>g});const n=JSON.parse('{"id":"going-deeper/logger","title":"Loggers","description":"you can use log to record details you need during various parts of execution:","source":"@site/docs/going-deeper/logger.md","sourceDirName":"going-deeper","slug":"/going-deeper/logger","permalink":"/pashmak/docs/going-deeper/logger","draft":false,"unlisted":false,"editUrl":"https://github.com/devbro1/pashmak/blob/master/docs/docs/going-deeper/logger.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Helpers","permalink":"/pashmak/docs/going-deeper/helper"},"next":{"title":"Middleware","permalink":"/pashmak/docs/going-deeper/middlewares"}}');var s=r(2540),t=r(3023);const a={sidebar_position:5},i="Loggers",l={},g=[{value:"detailed logs",id:"detailed-logs",level:2},{value:"multiple loggers",id:"multiple-loggers",level:2},{value:"extrasFunction",id:"extrasfunction",level:2}];function d(e){const o={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.header,{children:(0,s.jsx)(o.h1,{id:"loggers",children:"Loggers"})}),"\n",(0,s.jsx)(o.p,{children:"you can use log to record details you need during various parts of execution:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-ts",children:'import { logger } from "@root/facades";\n\nlogger().info("info green message");\nlogger().warn("warning yellow message");\nlogger().error("error red message");\nlogger().fatal("fatal black message");\nlogger().trace("trace white message");\nlogger().debug("debug gray message");\n'})}),"\n",(0,s.jsx)(o.p,{children:"these would produce proper log messages in json format to stdout."}),"\n",(0,s.jsx)(o.h2,{id:"detailed-logs",children:"detailed logs"}),"\n",(0,s.jsx)(o.p,{children:"if you need to capture more details in your logs, you can always pass an object instead:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-ts",children:'logger().info({ msg: "my message", err: error });\n// or\nlogger().info("my message", { err: error });\n'})}),"\n",(0,s.jsx)(o.h2,{id:"multiple-loggers",children:"multiple loggers"}),"\n",(0,s.jsx)(o.p,{children:"if you want to have multiple loggers simply define different configs for each logger in config/logger.ts file."}),"\n",(0,s.jsx)(o.p,{children:"Currently we are using Pino to generate logs. So passing any valid Pino config will work."}),"\n",(0,s.jsx)(o.h2,{id:"extrasfunction",children:"extrasFunction"}),"\n",(0,s.jsx)(o.p,{children:"Sometimes you want to globally add some details to all your LogMessages. to do this pass option\nextraFunctions in your config:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-ts",children:'import { ctxSafe } from "@devbro/pashmak/helper";\nimport { LogMessage } from "@devbro/pashmak/logger";\n\nexport default {\n  extrasFunction: (message: LogMessage) => {\n    let requestId = ctxSafe()?.get("requestId");\n    requestId && (message.requestId = requestId);\n    return message;\n  },\n};\n'})})]})}function c(e={}){const{wrapper:o}={...(0,t.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);