"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[530],{3023:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>i});var o=n(3696);const t={},s=o.createContext(t);function a(e){const r=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(s.Provider,{value:r},e.children)}},7460:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"tutorial-basics/Routing","title":"Router","description":"Router facade is the backbone of http server to connect different routes to your controllers.","source":"@site/docs/tutorial-basics/Routing.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/Routing","permalink":"/pashmak/docs/tutorial-basics/Routing","draft":false,"unlisted":false,"editUrl":"https://github.com/devbro1/pashmak/blob/master/docs/docs/tutorial-basics/Routing.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Directory structure","permalink":"/pashmak/docs/tutorial-basics/directory-structure"},"next":{"title":"Controller","permalink":"/pashmak/docs/tutorial-basics/Controller"}}');var t=n(2540),s=n(3023);const a={sidebar_position:4},i="Router",l={},c=[{value:"functional controller",id:"functional-controller",level:2},{value:"Error handling",id:"error-handling",level:2}];function d(e){const r={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"router",children:"Router"})}),"\n",(0,t.jsx)(r.p,{children:"Router facade is the backbone of http server to connect different routes to your controllers."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'import { Request, Response } from "@devbro/pashmak/router";\nimport { router } from "@devbro/pashmak/facades";\n\nimport { CatController } from "./app/controllers/CatController";\nimport { AnimalController } from "./app/controllers/AnimalController";\nimport { loggerMiddleware, logResponseMiddleware } from "./middlewares";\n\nrouter.addGlobalMiddleware(loggerMiddleware);\n\nrouter().addRoute(\n  ["GET", "HEAD"],\n  "/api/v1/countries",\n  async (req: any, res: any) => {\n    return { yey: "GET countries" };\n  },\n);\n\nrouter.addRoute("GET", "/api/v1/countries", async (req: any, res: any) => {\n  return { yey: "GET countries" };\n});\n\nrouter\n  .addRoute(["GET", "HEAD"], "/api/v1/regions", async (req: any, res: any) => {\n    return { yey: "GET regions" };\n  })\n  .addMiddleware(logResponseMiddleware);\n\nrouter.addController(CatController);\nrouter.addController(AnimalController);\n'})}),"\n",(0,t.jsx)(r.p,{children:"router manages both middlewares and controlers."}),"\n",(0,t.jsx)(r.p,{children:"controller can be either a Controller class or an async function that gets a request and response object."}),"\n",(0,t.jsx)(r.h2,{id:"functional-controller",children:"functional controller"}),"\n",(0,t.jsx)(r.p,{children:"basic format of a functional controller is:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'async (req: Request, res: Response) => {\n  return { message: "GET regions" };\n};\n'})}),"\n",(0,t.jsx)(r.p,{children:"if you want to do more complex returns you can directly modify Response."}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.p,{children:"[!CAUTION]\nResponse and Request objects are NOT the standard objects defined as part of node, make sure to import them from @pashmak."}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'import { Request, Response } from "@devbro/pashmak/router";\n\nasync (req: Request, res: Response) => {\n  res.writeHead(418, { "Content-Type": "text/plain" });\n  res.end("Can you guess what I am?");\n};\n'})}),"\n",(0,t.jsx)(r.h2,{id:"error-handling",children:"Error handling"}),"\n",(0,t.jsxs)(r.p,{children:["Router is able to handle error by default. If you throw any error of type ",(0,t.jsx)(r.code,{children:"HttpError"}),", httpserver can render them as json right away. If error is of any other type, server will return a generic 500 error."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'import { Request, Response } from "@devbro/pashmak/router";\nimport { HttpError, HTTPUnauthorizedError } from "@devbro/pashmak/http";\nasync (req: Request, res: Response) => {\n  throw new HTTPUnauthorizedError();\n};\n'})}),"\n",(0,t.jsx)(r.p,{children:"if you want to have your own custom error handler you can:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"import { server } from '@devbro/pashmak/facades';\n\nserver().setErrorHandler(async (err: Error, req: any, res: any) => {\n  // ???\n}\n"})})]})}function u(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);