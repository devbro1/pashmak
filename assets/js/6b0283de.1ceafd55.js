"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5803],{2718:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"going-deeper/queue","title":"Queue and Messaging","description":"The concept of the queue is to allow messages to be sent using connections an queue.","source":"@site/docs/going-deeper/queue.md","sourceDirName":"going-deeper","slug":"/going-deeper/queue","permalink":"/pashmak/docs/going-deeper/queue","draft":false,"unlisted":false,"editUrl":"https://github.com/devbro1/pashmak/blob/master/docs/docs/going-deeper/queue.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Middleware","permalink":"/pashmak/docs/going-deeper/middlewares"},"next":{"title":"Scheduler and Cron Jobs","permalink":"/pashmak/docs/going-deeper/scheduler"}}');var i=s(2540),t=s(3023);const o={sidebar_position:7},r="Queue and Messaging",d={},c=[{value:"connection vs queue",id:"connection-vs-queue",level:2},{value:"Creating a connection",id:"creating-a-connection",level:2},{value:"How messaging works",id:"how-messaging-works",level:2},{value:"Available drivers:",id:"available-drivers",level:2},{value:"database",id:"database",level:4},{value:"SQS",id:"sqs",level:4},{value:"RabbitMQ",id:"rabbitmq",level:4},{value:"Logger",id:"logger",level:4},{value:"Async",id:"async",level:4}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"queue-and-messaging",children:"Queue and Messaging"})}),"\n",(0,i.jsx)(n.p,{children:"The concept of the queue is to allow messages to be sent using connections an queue."}),"\n",(0,i.jsx)(n.h2,{id:"connection-vs-queue",children:"connection vs queue"}),"\n",(0,i.jsx)(n.p,{children:"concept of Connection is like a server/service that can handle multiple queues. Think of RabbitMQ server that can handle multiple queues."}),"\n",(0,i.jsx)(n.p,{children:"queue is a channel inside a connection that can handle messages."}),"\n",(0,i.jsx)(n.h2,{id:"creating-a-connection",children:"Creating a connection"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'// app/config/queues.ts\nexport default {\n  queues: {\n    default: {\n      type: "database",\n    },\n  },\n};\n'})}),"\n",(0,i.jsx)(n.h2,{id:"how-messaging-works",children:"How messaging works"}),"\n",(0,i.jsx)(n.p,{children:"unlike traditional approaches where you send string. Pashmak Queue works with objects:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { queue } from '@devbro/pashmak/facades';\nimport { QueueMessageInterface } from '@devbro/pashmak/queue';\n\nexport class IncomingWebhookMessage implements QueueMessageInterface {\n\n  /**\n   * Method to convert Message to string.\n   * keep in mind this string should be able to be converted back to Message object.\n   */\n  async getMessage(): Promise<string> {\n    return JSON.stringify({...this.something, ...this.somethingElse});\n  }\n\n    /**\n     * Method to set message from string or object.\n     */\n  async setMessage(value: string | Record<string, any>): Promise<void> {\n    ???\n    this.something = ???;\n    this.somethingElse = ???;\n  }\n\n/**\n * Method to validate message before processing.\n * return true if message is valid, false otherwise.\n * It is to prevent processing invalid messages.\n */\n  async validateMessage(): Promise<Boolean> {\n    return true;\n  }\n\n  async processMessage(): Promise<void> {\n    // process the message here\n  }\n\n    /**\n     * Send the message to a queue.\n     */\n  async dispatch() {\n    queue().dispatch('stripe_incoming_webhook', this);\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"available-drivers",children:"Available drivers:"}),"\n",(0,i.jsx)(n.h4,{id:"database",children:"database"}),"\n",(0,i.jsx)(n.p,{children:"uses database to store messages. This is the default driver and requires a table in your database."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# to create a migration for queue table\nyarn pdev generate queue migration\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sqs",children:"SQS"}),"\n",(0,i.jsx)(n.p,{children:"uses AWS SQS service to handle messages. You need to provide AWS credentials and region in your config."}),"\n",(0,i.jsx)(n.h4,{id:"rabbitmq",children:"RabbitMQ"}),"\n",(0,i.jsx)(n.h4,{id:"logger",children:"Logger"}),"\n",(0,i.jsx)(n.h4,{id:"async",children:"Async"})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},3023:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>r});var a=s(3696);const i={},t=a.createContext(i);function o(e){const n=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);